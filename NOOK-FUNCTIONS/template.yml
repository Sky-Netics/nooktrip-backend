AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: NookTrip Backend Functions

Globals:
  Function:
    Timeout: 900
    MemorySize: 1024

Parameters:
  env:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - uat
    - prod

Resources:
  # Define the API Gateway explicitly
  NookTripApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: NookTripApi

  # Add API resources
  ItinerariesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NookTripApi
      ParentId: !GetAtt NookTripApi.RootResourceId
      PathPart: 'itineraries'

  EmailsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NookTripApi
      ParentId: !GetAtt NookTripApi.RootResourceId
      PathPart: 'emails'

  FeedbackResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref NookTripApi
      ParentId: !GetAtt NookTripApi.RootResourceId
      PathPart: 'feedback'

  # Add a deployment resource
  NookTripApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ItinerariesMethod
      - EmailsMethod
      - FeedbackMethod
    Properties:
      RestApiId: !Ref NookTripApi
      Description: Deployment for NookTrip API

  # Add a stage resource using the env parameter
  NookTripApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref NookTripApiDeployment
      RestApiId: !Ref NookTripApi
      StageName: !Ref env

  NookTripSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "nooktrip-secrets-${env}"
      Description: "Secrets for NookTrip API"

  NookTripImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "nooktrip-images-${env}"
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  NookTripImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NookTripImagesBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: PublicReadGetObject
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource: !Sub "arn:aws:s3:::${NookTripImagesBucket}/*"

  # IAM Role for Itineraries function
  ItinerariesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ItinerariesLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource: !Ref NookTripSecrets

  # Itineraries Lambda Function
  ITINERARIESFUNCTION:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: itineraries/
      FunctionName: !Sub "Itineraries-${env}"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ItinerariesLambdaRole.Arn
      Runtime: python3.11
      MemorySize: 2048  # Increased memory for handling map generation and image processing
      Architectures:
      - x86_64
      Environment:
        Variables:
          SECRET_ID_NAME: !Ref NookTripSecrets

  # Itineraries API Method
  ItinerariesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ItinerariesResource
      RestApiId: !Ref NookTripApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ITINERARIESFUNCTION.Arn}/invocations"

  # IAM Role for Emails function
  EmailsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: EmailsLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource: !Ref NookTripSecrets
          - Effect: Allow
            Action:
            - ses:SendEmail
            - ses:SendRawEmail
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${NookTripImagesBucket}/*"

  # Emails Lambda Function
  EMAILSFUNCTION:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: emails/
      FunctionName: !Sub "Emails-${env}"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt EmailsLambdaRole.Arn
      Runtime: python3.11
      Architectures:
      - x86_64
      Environment:
        Variables:
          SECRET_ID_NAME: !Ref NookTripSecrets
          IMAGES_BUCKET_NAME: !Ref NookTripImagesBucket

  # Emails API Method
  EmailsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref EmailsResource
      RestApiId: !Ref NookTripApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EMAILSFUNCTION.Arn}/invocations"

  # IAM Role for Feedback function
  FeedbackLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: FeedbackLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource: !Ref NookTripSecrets

  # Feedback Lambda Function
  FEEDBACKFUNCTION:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: feedbacks/
      FunctionName: !Sub "Feedback-${env}"
      Handler: feedback_lambda_function.lambda_handler
      Role: !GetAtt FeedbackLambdaRole.Arn
      Runtime: python3.11
      Architectures:
      - x86_64
      Environment:
        Variables:
          SECRET_ID_NAME: !Ref NookTripSecrets
          DB_CONNECTION_STRING: !Sub "{{resolve:secretsmanager:${NookTripSecrets}:SecretString:DB_CONNECTION}}"

  # Feedback API Method
  FeedbackMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref FeedbackResource
      RestApiId: !Ref NookTripApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FEEDBACKFUNCTION.Arn}/invocations"

  # Lambda permissions
  ItinerariesFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ITINERARIESFUNCTION
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${NookTripApi}/*/*/*"

  EmailsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EMAILSFUNCTION
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${NookTripApi}/*/*/*"

  FeedbackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FEEDBACKFUNCTION
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${NookTripApi}/*/*/*"

Outputs:
  NookTripSecretsName:
    Description: "Secrets Manager for NookTrip API credentials"
    Value: !Ref NookTripSecrets

  ItinerariesApi:
    Description: "API Gateway endpoint URL for Itineraries function"
    Value: !Sub "https://${NookTripApi}.execute-api.${AWS::Region}.amazonaws.com/${env}/itineraries"

  EmailsApi:
    Description: "API Gateway endpoint URL for Emails function"
    Value: !Sub "https://${NookTripApi}.execute-api.${AWS::Region}.amazonaws.com/${env}/emails"

  FeedbackApi:
    Description: "API Gateway endpoint URL for Feedback function"
    Value: !Sub "https://${NookTripApi}.execute-api.${AWS::Region}.amazonaws.com/${env}/feedback"

  NookTripImagesBucketName:
    Description: "S3 Bucket for storing NookTrip images"
    Value: !Ref NookTripImagesBucket

  NookTripImagesBucketUrl:
    Description: "URL for accessing NookTrip images"
    Value: !Sub "https://${NookTripImagesBucket}.s3.amazonaws.com/"
