AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: NookTrip Backend Functions

Globals:
  Function:
    Timeout: 900
    MemorySize: 1024

Parameters:
  env:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - uat
    - prod

Resources:
  NookTripSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "nooktrip-secrets-${env}"
      Description: "Secrets for NookTrip API"

  NookTripImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "nooktrip-images-${env}"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  NookTripImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NookTripImagesBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${NookTripImagesBucket}/*"

  ItinerariesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ItinerariesLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource: !Ref NookTripSecrets

  ITINERARIESFUNCTION:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: itineraries/
      FunctionName: !Sub "Itineraries-${env}"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ItinerariesLambdaRole.Arn
      Runtime: python3.11
      Architectures:
      - x86_64
      Environment:
        Variables:
          SECRET_ID_NAME: !Ref NookTripSecrets
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /itineraries
            Method: POST

  EmailsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: EmailsLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource: !Ref NookTripSecrets
          - Effect: Allow
            Action:
            - ses:SendEmail
            - ses:SendRawEmail
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${NookTripImagesBucket}/*"

  EMAILSFUNCTION:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: emails/
      FunctionName: !Sub "Emails-${env}"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt EmailsLambdaRole.Arn
      Runtime: python3.11
      Architectures:
      - x86_64
      Environment:
        Variables:
          SECRET_ID_NAME: !Ref NookTripSecrets
          IMAGES_BUCKET_NAME: !Ref NookTripImagesBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /emails
            Method: POST

Outputs:
  NookTripSecretsName:
    Description: "Secrets Manager for NookTrip API credentials"
    Value: !Ref NookTripSecrets
  ItinerariesApi:
    Description: "API Gateway endpoint URL for Itineraries function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/itineraries/"
  EmailsApi:
    Description: "API Gateway endpoint URL for Emails function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/emails/"
  NookTripImagesBucketName:
    Description: "S3 Bucket for storing NookTrip images"
    Value: !Ref NookTripImagesBucket
  NookTripImagesBucketUrl:
    Description: "URL for accessing NookTrip images"
    Value: !Sub "https://${NookTripImagesBucket}.s3.amazonaws.com/"
